
AVR_EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000617  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000113  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <funct>:

#define MCUCR *((volatile u8 *)0x55) //sense control set 2 bits
#define SREG *((volatile u8 *)0x5F)
#define SREG_I_BIT 7
void funct(){
	PORTD |=1<<5;
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <funct+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <funct+0x16>
  92:	00 00       	nop
	_delay_ms(1000);
	PORTD &=~(1<<5);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <Func_PTR>:
    {
    }
}
void (*ptr) (void)=0;
void Func_PTR (void (*ptr1) (void)){
	if (ptr1!=0){
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	21 f0       	breq	.+8      	; 0xa8 <Func_PTR+0xc>
		ptr=ptr1;
  a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	08 95       	ret

000000aa <main>:
	PORTD &=~(1<<5);

	}
int main(void)
{
	DDRD |=1<<5; //set as output
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	81 bb       	out	0x11, r24	; 17
	DDRD &=~(1<<2);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	81 bb       	out	0x11, r24	; 17
	PORTD |=1<<2;
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	82 bb       	out	0x12, r24	; 18
	SREG |=1<<7;
  bc:	8f b7       	in	r24, 0x3f	; 63
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8f bf       	out	0x3f, r24	; 63
	GICR |=1<<6;
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8b bf       	out	0x3b, r24	; 59

	MCUCR |=1<<0;
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	85 bf       	out	0x35, r24	; 53
	MCUCR |=1<<1;
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	85 bf       	out	0x35, r24	; 53
	Func_PTR(funct);
  d4:	8e e3       	ldi	r24, 0x3E	; 62
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 4e 00 	call	0x9c	; 0x9c <Func_PTR>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x32>

000000de <__vector_1>:
		ptr=ptr1;
	}
}
void __vector_1 (void)__attribute__ ((signal));

void __vector_1 (void){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	ptr();
 100:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 108:	09 95       	icall
	MCUCR ^=1<<0;
 10a:	95 b7       	in	r25, 0x35	; 53
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	89 27       	eor	r24, r25
 110:	85 bf       	out	0x35, r24	; 53
	MCUCR |=1<<1;
 112:	85 b7       	in	r24, 0x35	; 53
 114:	82 60       	ori	r24, 0x02	; 2
 116:	85 bf       	out	0x35, r24	; 53
	
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
